<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Markus Sauerberg</title>
    <link>/</link>
      <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <description>Markus Sauerberg</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Wed, 11 Aug 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/media/icon_hua2ec155b4296a9c9791d015323e16eb5_11927_512x512_fill_lanczos_center_2.png</url>
      <title>Markus Sauerberg</title>
      <link>/</link>
    </image>
    
    <item>
      <title>Period life expectancy in Germany</title>
      <link>/post/leingermany/</link>
      <pubDate>Wed, 11 Aug 2021 00:00:00 +0000</pubDate>
      <guid>/post/leingermany/</guid>
      <description>


&lt;div id=&#34;death-counts-in-germany-between-2019-and-2020&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Death counts in Germany between 2019 and 2020&lt;/h1&gt;
&lt;p&gt;In the light of the COVID-19 pandemic, researchers and journalists were highly interested in comparing the observed number of deaths in 2020 with annual death counts from previous years. Further, there is a still ongoing discussion about the impact of COVID-19 on life expectancy (LE). The relationship between increases/decreases in the annual death count observed in a year and changes in LE is not as clear as often suggested. In the following, I would like to share my analysis on the age distribution of deaths in 2019 and 2020, hoping to create some clarification. The calculations are based on mortality data for women and men in Germany downloaded from &lt;a href=&#34;https://www.destatis.de/DE/Home/_inhalt.html&#34;&gt;Desatis&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(openxlsx)
setwd(&amp;quot;d:/Rcode/Data&amp;quot;)

###Data is available at www.destatis.de
Deaths.m &amp;lt;- read.xlsx(&amp;quot;Sterbefälle.xlsx&amp;quot;, sheet=&amp;quot;Men&amp;quot;)
Deaths.f &amp;lt;- read.xlsx(&amp;quot;Sterbefälle.xlsx&amp;quot;, sheet=&amp;quot;Women&amp;quot;)

Dx.2019.m &amp;lt;- Deaths.m$Deaths2019
Dx.2020.m &amp;lt;- Deaths.m$Deaths2020

Dx.2019.f &amp;lt;- Deaths.f$Deaths2019
Dx.2020.f &amp;lt;- Deaths.f$Deaths2020

rbind(
    cbind(X2019=sum(Dx.2019.m),
      X2020=sum(Dx.2020.m),
      Diff=sum(Dx.2019.m)-sum(Dx.2020.m)
      ),

    cbind(X2019=sum(Dx.2019.f),
      X2020=sum(Dx.2020.f),
      Diff=sum(Dx.2019.f)-sum(Dx.2020.f)
      )
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       X2019  X2020   Diff
## [1,] 465885 492797 -26912
## [2,] 473635 492775 -19140&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output shown above gives the total death count for men (first row) and women (second row) in 2019 and 2020. The difference between the two years is presented in the last column of the table. We observe more deaths in 2020 compared to 2019 for both genders. We know from previous analyses that excess deaths were not equally distributed over time and across regions. For example, the number of deaths was particularly high at the end of 2020. Analyzing these differences is, however, beyond the scope of this post. Instead, I focus on the average and calculate the mean age at death (MAD), the mode (the age with the highest observed death count), and the median (the age at which 50 percent of the total number of deaths have occurred). Please let me know if you know a better way to derive mode and median (maybe with decimals) without getting too sophisticated (e.g., modeling and predicting counts).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;age &amp;lt;- 0:100
MAD.2019.m &amp;lt;- (sum((age+0.5)*Dx.2019.m))/sum(Dx.2019.m)
MAD.2020.m &amp;lt;- (sum((age+0.5)*Dx.2020.m))/sum(Dx.2020.m)
Mode.2019.m &amp;lt;- age[which.max(Dx.2019.m)]
Mode.2020.m &amp;lt;- age[which.max(Dx.2020.m)]
Median.2019.m &amp;lt;- age[which(cumsum(Dx.2019.m)&amp;gt;=(sum(Dx.2019.m)/2))[1]]
Median.2020.m &amp;lt;- age[which(cumsum(Dx.2020.m)&amp;gt;=(sum(Dx.2020.m)/2))[1]]

MAD.2019.f &amp;lt;- (sum((age+0.5)*Dx.2019.f))/sum(Dx.2019.f)
MAD.2020.f &amp;lt;- (sum((age+0.5)*Dx.2020.f))/sum(Dx.2020.f)
Mode.2019.f &amp;lt;- age[which.max(Dx.2019.f)]
Mode.2020.f &amp;lt;- age[which.max(Dx.2020.f)]
Median.2019.f &amp;lt;- age[which(cumsum(Dx.2019.f)&amp;gt;=(sum(Dx.2019.f)/2))[1]]
Median.2020.f &amp;lt;- age[which(cumsum(Dx.2020.f)&amp;gt;=(sum(Dx.2020.f)/2))[1]]

rbind(
    cbind(MAD.2019=MAD.2019.m,
      MAD.2020=MAD.2020.m,
      Diff=MAD.2019.m-MAD.2020.m
      ),

    cbind(MAD.2019=MAD.2019.f,
      MAD.2020=MAD.2020.f,
      Diff=MAD.2019.f-MAD.2020.f
      )
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      MAD.2019 MAD.2020       Diff
## [1,] 76.05939 76.47146 -0.4120715
## [2,] 81.92622 82.18910 -0.2628851&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The MAD increased for both, women and men between 2019 and 2020. Accordingly, the analysis suggest that more people have died in 2020 but most deaths have occurred at relatively old ages. It is correct that this kind of analysis does not take into account changes in the age structure. Germany is an aging population and more persons at older ages will necessarily lead to an increase in the observed death count. The following graph shows the observed distribution of death. The vertical lines indicate the MAD, the modal age at death, and the median.
&lt;img src=&#34;/post/leingermany/index.en_files/figure-html/Fig1-1.png&#34; width=&#34;960&#34; /&gt;
Especially at higher ages (between 80 and 90), more deaths have been observed in 2020 compared to the previous year. More information about the relationship between longevity and trends in the mean age at death, modal age at death, and median age at death can be found in Canudas-Romo (2010).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;standardized-mean-age-at-death&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Standardized Mean Age at Death&lt;/h1&gt;
&lt;p&gt;In the next step, I will calculate another MAD which is less common but, I believe, very interesting. It is the standardized MAD which has been described by Bongaarts and Feeney (2003). The standardized MAD is the mean age at death that would have been observed if the present population had experienced a constant inflow of births. In other words, the initial size of each birth cohort is constant or how Guillot (2006) put it “MAD can be interpreted as the population mean age at death at time t, controlling for changes in the initial size of cohorts.” I used the cohort life tables provided by Destatis in order to calculate the standardized number of deaths in 2019 and 2020. This allows obtaining standardized MAD, mode, and median values.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;###Standardized death count calculated on the basis of cohort life tables provided at www.destatis.de
library(openxlsx)
setwd(&amp;quot;d:/Rcode/Data&amp;quot;)

Dx.standardized &amp;lt;- read.table(&amp;quot;MAD_dx.txt&amp;quot;)

Std.Dx.2019.m &amp;lt;- Dx.standardized$dx.2019[Dx.standardized$Sex==&amp;quot;M&amp;quot;]*100000
Std.Dx.2020.m &amp;lt;- Dx.standardized$dx.2020[Dx.standardized$Sex==&amp;quot;M&amp;quot;]*100000

Std.Dx.2019.f &amp;lt;- Dx.standardized$dx.2019[Dx.standardized$Sex==&amp;quot;F&amp;quot;]*100000
Std.Dx.2020.f &amp;lt;- Dx.standardized$dx.2020[Dx.standardized$Sex==&amp;quot;F&amp;quot;]*100000


age &amp;lt;- 0:100
Std.MAD.2019.m &amp;lt;- (sum((age+0.5)*Std.Dx.2019.m))/sum(Std.Dx.2019.m)
Std.MAD.2020.m &amp;lt;- (sum((age+0.5)*Std.Dx.2020.m))/sum(Std.Dx.2020.m)
Std.Mode.2019.m &amp;lt;- age[which.max(Std.Dx.2019.m)]
Std.Mode.2020.m &amp;lt;- age[which.max(Std.Dx.2020.m)]
Std.Median.2019.m &amp;lt;- age[which(cumsum(Std.Dx.2019.m)&amp;gt;=(sum(Std.Dx.2019.m)/2))[1]]
Std.Median.2020.m &amp;lt;- age[which(cumsum(Std.Dx.2020.m)&amp;gt;=(sum(Std.Dx.2020.m)/2))[1]]

Std.MAD.2019.f &amp;lt;- (sum((age+0.5)*Std.Dx.2019.f))/sum(Std.Dx.2019.f)
Std.MAD.2020.f &amp;lt;- (sum((age+0.5)*Std.Dx.2020.f))/sum(Std.Dx.2020.f)
Std.Mode.2019.f &amp;lt;- age[which.max(Std.Dx.2019.f)]
Std.Mode.2020.f &amp;lt;- age[which.max(Std.Dx.2020.f)]
Std.Median.2019.f &amp;lt;- age[which(cumsum(Std.Dx.2019.f)&amp;gt;=(sum(Std.Dx.2019.f)/2))[1]]
Std.Median.2020.f &amp;lt;- age[which(cumsum(Std.Dx.2020.f)&amp;gt;=(sum(Std.Dx.2020.f)/2))[1]]

rbind(
    cbind(MAD.2019=Std.MAD.2019.m,
      MAD.2020=Std.MAD.2020.m,
      Diff=Std.MAD.2019.m-Std.MAD.2020.m
      ),

    cbind(MAD.2019=Std.MAD.2019.f,
      MAD.2020=Std.MAD.2020.f,
      Diff=Std.MAD.2019.f-Std.MAD.2020.f
      )
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      MAD.2019 MAD.2020       Diff
## [1,] 76.37203 76.56336 -0.1913279
## [2,] 81.83031 81.96213 -0.1318239&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By definition, this measure is not affected by changes in the age structure. Also the standardized MAD increased between 2019 and 2020. The standardized distribution is smoother as compared to the unstandardized one, indicating that some of the bumps can be ascribed to differences in the size of birth cohorts.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/leingermany/index.en_files/figure-html/Fig2-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;period-life-expectancy-in-2019-and-2020&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Period life expectancy in 2019 and 2020&lt;/h1&gt;
&lt;p&gt;Last but not least, I provide estimates for the most prominent mortality indicator, i.e., period life expectancy at birth (LE). As a reminder, LE is the mean age at death for the period life table population. The life table population is derived from age-specific death rates which are again provided by Destatis. This is the exact link: &lt;a href=&#34;https://www.destatis.de/DE/Presse/Pressemitteilungen/2021/07/PD21_331_12621.html&#34; class=&#34;uri&#34;&gt;https://www.destatis.de/DE/Presse/Pressemitteilungen/2021/07/PD21_331_12621.html&lt;/a&gt;. I simply copied the values from the table to my R session, e.g., “Germany.mx.2019.women &amp;lt;- c(…)” (code is omitted). Please note, the death rates refer to 5-years age intervals. For this reason, I calculated an abridged life table. The R package &lt;a href=&#34;https://timriffe.github.io/DemoTools/&#34;&gt;DemoTools&lt;/a&gt;&#34; by Tim Riffe et al. (2019) helped me. Thanks! The LE values for 2019 and 2020 in Germany based on single-age specific period life tables will be published at &lt;a href=&#34;https://lebenserwartung.info/&#34;&gt;www.lebenserwartung.info&lt;/a&gt; and differ slightly from the LE estimates presented in this post (the single-age specific life tables with an open age-interval at higher ages yield more precise LE estimates).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;###Following the DemoTools documentation example, the abridged life table is constructed as:
library(DemoTools)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Lade nötiges Paket: Rcpp&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Age &amp;lt;- c(0, 1, seq(5, 95, by = 5))
AgeInt &amp;lt;- age2int(Age,OAvalue = 5)

LE.women.2019 &amp;lt;- lt_abridged(Age=Age, nMx = Germany.mx.2019.women/1000, sex = &amp;quot;female&amp;quot;,
                             AgeInt = AgeInt, axmethod = &amp;quot;un&amp;quot;, mod = FALSE, OAnew = 100, a0rule =&amp;quot;cd&amp;quot;)

LE.women.2020 &amp;lt;- lt_abridged(Age=Age, nMx = Germany.mx.2020.women/1000, sex = &amp;quot;female&amp;quot;,
                             AgeInt = AgeInt, axmethod = &amp;quot;un&amp;quot;, mod = FALSE, OAnew = 100, a0rule =&amp;quot;cd&amp;quot;)

LE.men.2019 &amp;lt;- lt_abridged(Age=Age, nMx = Germany.mx.2019.men/1000, sex = &amp;quot;male&amp;quot;,
                           AgeInt = AgeInt, axmethod = &amp;quot;un&amp;quot;, mod = FALSE, OAnew = 100, a0rule =&amp;quot;cd&amp;quot;)

LE.men.2020 &amp;lt;- lt_abridged(Age=Age, nMx = Germany.mx.2020.men/1000, sex = &amp;quot;male&amp;quot;,
                           AgeInt = AgeInt, axmethod = &amp;quot;un&amp;quot;, mod = FALSE, OAnew = 100, a0rule =&amp;quot;cd&amp;quot;)

###Compare LE estimates by age
###Men in Germany
round(cbind(Age=Age[c(1,15)],
      LE.2019=LE.men.2019$ex[c(1,15)],
      LE.2020=LE.men.2020$ex[c(1,15)],
      Diff=LE.men.2019$ex[c(1,15)]-LE.men.2020$ex[c(1,15)]),2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      Age LE.2019 LE.2020 Diff
## [1,]   0   78.86   78.69 0.17
## [2,]  65   18.15   17.92 0.23&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;###Women in Germany
round(cbind(Age=Age[c(1,15)],
      LE.2019=LE.women.2019$ex[c(1,15)],
      LE.2020=LE.women.2020$ex[c(1,15)],
      Diff=LE.women.2019$ex[c(1,15)]-LE.women.2020$ex[c(1,15)]),2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      Age LE.2019 LE.2020 Diff
## [1,]   0   83.64   83.55 0.10
## [2,]  65   21.35   21.23 0.12&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;###getting mode
Mode.LT.2019.f &amp;lt;- Age[which.max(LE.women.2019$ndx)]
Mode.LT.2020.f &amp;lt;- Age[which.max(LE.women.2020$ndx)]
Mode.LT.2019.m &amp;lt;- Age[which.max(LE.men.2019$ndx)]
Mode.LT.2020.m &amp;lt;- Age[which.max(LE.men.2020$ndx)]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As presented in the table above, LE slightly decreased for both genders. The distribution of life table deaths is plotted below. It shows the age-specific number of deaths for the life table cohort which has been exposed to the age-specific mortality rates observed in Germany.
&lt;img src=&#34;/post/leingermany/index.en_files/figure-html/Fig3-1.png&#34; width=&#34;960&#34; /&gt;
This time I do not calculate the median because, as already mentioned, data was only available in 5-years age intervals. The median should lay somewhere in the age interval 80-84 for men and 85-89 for women. The MAD (or LE) in the period life table population is higher compared to the the unstandardized and standardized MAD. Another way to look at LE is imagining Germany would be trapped in a loop where it repeats the year 2020 over and over again for about 100 years (I know, nobody wants this). A lucky child who is born at the beginning of this loop can expect to live 83.55 years in case it´s a girl and 78.69 years if it´s a boy. Obviously, this scenario is unlikely and LE is usually not a good estimate for the expected life time of any actual group of individuals (Goldstein and Wachter 2006). It is rather a convenient way to summarize period death rates and examine period shocks in health and mortality. The increase in the observed death rates for the elderly in 2020 is reflected by the decrease in period LE in 2020. Yet, the indicator is not free of limitations and can lead to misleading conclusions regarding levels and trends in population health (Luy et al. 2020; Modig, Rau, and Ahlbom 2020; Heuveline 2021). In comparison to other countries, Germany`s LE reduction is small. It is important to note that changes in death rates at different ages will affect LE differently (Vaupel 1986). It is therefore not so easy to translate increases in death counts at any age directly into LE reductions. For instance, the reduction in LE is higher at age 65 compared to LE at birth, indicating that death rates have mostly increased at older ages. The largest increase in mortality is observed for older men (LE at age 65 decreased by 0.23 years between 2019 and 2020). For more information about differences in LE in Germany, including differences between genders, East and West Germany, socioeconomic groups, and regions, see Marc Luy´s webpage &lt;a href=&#34;https://lebenserwartung.info/&#34;&gt;www.lebenserwartung.info&lt;/a&gt; and for more country-specific results see the work by Aburto et al. (2021), which also features an interactive &lt;a href=&#34;https://covid19.demographicscience.ox.ac.uk/lifeexpectancy&#34;&gt;dashboard&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;references&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Canudas-Romo, V. (2010). Three Measures of Longevity: Time Trends and Record Values. &lt;strong&gt;Demography&lt;/strong&gt; 47(2):299–312.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bongaarts, J. and Feeney, G. (2003). Estimating mean lifetime. &lt;strong&gt;PNAS&lt;/strong&gt; 100(23):13127-13133.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Guillot, M. (2006). Tempo effects in mortality: An appraisal. &lt;strong&gt;Demographic Research&lt;/strong&gt; 41(1):1-26.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Riffe, T., Aburto, J.M., Alexander, M., Fennell, S., Kashnitsky, I., Pascariu, M., Gerland, P. (2019). DemoTools: An R package of tools for aggregate demographic analysis. &lt;a href=&#34;https://github.com/timriffe/DemoTools/&#34;&gt;github.com/timriffe/DemoTools&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Goldstein, J., &amp;amp; Wachter, K. (2006). Relationships between Period and Cohort Life Expectancy: Gaps and Lags. &lt;strong&gt;Population Studies&lt;/strong&gt; 60(3):257-269.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Luy, M., Di Giulio, P., Di Lego, V., Lazarevič, P., Sauerberg, M. (2020). Life Expectancy: Frequently Used, but Hardly Understood. &lt;strong&gt;Gerontology&lt;/strong&gt; 66:95-104.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Modig, K., Rau, R., Ahlbom, A. (2020). Life expectancy: what does it measure? &lt;strong&gt;BMJ Open&lt;/strong&gt; 10(7):e035932.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Heuveline, P. (2021). The Mean Unfulfilled Lifespan (MUL): A new indicator of the impact of mortality shocks on the individual lifespan, with application to mortality reversals induced by COVID-19. &lt;strong&gt;PLoS ONE&lt;/strong&gt; 16(7):e0254925.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Vaupel, J. (1986). How changes in age-specific mortality affects life expectancy. &lt;strong&gt;Population Studies&lt;/strong&gt; 40:147-157.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Aburto, J.M., Schöley, J., Zhang, L., Kashnitsky, I., Rahal, C., Missov, T.I., Mills, M.C., Dowd, J.B., Kashyap, R. (2021). Recent Gains in Life Expectancy Reversed by the COVID-19 Pandemic. &lt;strong&gt;Medrxiv&lt;/strong&gt; &lt;a href=&#34;https://www.medrxiv.org/content/10.1101/2021.03.02.21252772v1&#34;&gt;Link&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Human costs of the first wave of the COVID-19 pandemic in the major epicenters in Italy</title>
      <link>/publication/vyrb/</link>
      <pubDate>Thu, 22 Jul 2021 00:00:00 +0000</pubDate>
      <guid>/publication/vyrb/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Encrypting (pass)words in R</title>
      <link>/post/crypto/</link>
      <pubDate>Wed, 14 Jul 2021 00:00:00 +0000</pubDate>
      <guid>/post/crypto/</guid>
      <description>


&lt;div id=&#34;objective&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Objective&lt;/h1&gt;
&lt;p&gt;After reading the book “History of Codes” by Simon Singh, I was inspired to apply some of the things that I have learned in R. While the book describes the history of codes in terms of encrpyting and decrypting messages (e.g., for secret communication), I will focus on managing passwords. Please note that the following is written for fun and should not be interpreted as an attempt to develop a flawless password manager. It is rather my first try of writing an encryption function. I hope it is useful for generating passwords for conferences, journals, or shopping webpages.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;background&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Background&lt;/h1&gt;
&lt;p&gt;Encryption can be seen as substituting letters. As an example, each of the 26 letters of the alphabet could be shifted by one letter. This would result in “A -&amp;gt; B”, “B -&amp;gt; C”, “C -&amp;gt; D” and so forth. Using this substitution algorithm, the encryption of my name “Markus” results in “Nbslvt”. In order to decipher the word “Nbslvt” back to “Markus” one would need the key, i.e., a table indicating how the letters have been substituted. Obviously, the “shifted-by-one-letter” cipher can be figured out quite easily by most amateur code breakers and is not very safe. Throughout history scientists came up with much more sophisticated cipher codes and cipher machines in order to keep communication private. Especially, during the first and second World War secret communication became crucial for the military. With the rapid expansion of the internet, encrypting messages was no longer only a matter for governments and the military but also relevant for ordinary individuals. In my opinion, one of the most fascinating encryption technique is the Rivest–Shamir–Adleman (RSA) cryptosystem. This breakthrough idea uses one-way functions (functions that cannot easily be inverted) and the practical difficulty of factoring two prime numbers. The algorithm is without a doubt as genius and geeky as it gets. This video gives a very vivid explanation: &lt;a href=&#34;https://www.youtube.com/watch?v=4zahvcJ9glg&#34;&gt;Eddie Woo YouTube&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;my-implementation-in-r&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;My implementation in R&lt;/h1&gt;
&lt;p&gt;My idea is much more simple and relies on combining the substitution of letters with randomly selected numbers. In other words, I do not use an algorithm such as shifting the alphabet by &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; characters, as I have described above, but let the sample() function in R determine the substitution pattern. More specifically, each letter in the encrypted word will be based on its own sample() call. The word “Hallo”, for example, contains the letter “l” twice (third and forth element of the string). The sample() function might lead to a substitution of “l -&amp;gt; k” for the first “l” and the second “l” might be substituted with b (l -&amp;gt; b). This makes is much harder to break the encryption code because of the extremely high number of substitution possibilities. The key for the encryption function is the given by the set.seed() argument. The set.seed() function suspends the randomness in the sample() call and therefore allows transforming the letters back to their original order.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;the-choice-of-the-alphabet&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;The choice of the alphabet&lt;/h1&gt;
&lt;p&gt;My alphabet includes all 26 letters (in lower- and upper-case spelling), the numbers &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; to &lt;span class=&#34;math inline&#34;&gt;\(9\)&lt;/span&gt;, and a selection of special characters (!§$%&amp;amp;/()=?@*#&amp;lt;&amp;gt;_-.;+{}[]). The code can be easily modified in order to incorporate more special characters, i.e., Germans might want a “ö”, while Danes require “ø”, and the French prefer “ô”.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;CipherWord &amp;lt;- function(my.password, my.key) {

    set.seed(my.key)
    the.length &amp;lt;- length(unlist(strsplit(my.password, &amp;quot;&amp;quot;)))
    the.vec &amp;lt;- unlist(strsplit(my.password, &amp;quot;&amp;quot;))
    specials &amp;lt;- c(unlist(strsplit(&amp;quot;!§$%&amp;amp;/()=?@*#&amp;lt;&amp;gt;_-.;+{}[]&amp;quot;, &amp;quot;&amp;quot;)))
    all.characters &amp;lt;- c(letters, LETTERS, 0:9, specials)

    if (!all(the.vec %in% all.characters)) {
    stop(&amp;quot;unkown character(s) in password&amp;quot;)
    }

    cipher.list &amp;lt;- NULL
    for (i in 1:the.length) {
        cipher.frame &amp;lt;- data.frame(alphabet = all.characters)
        cipher.frame$alphabet &amp;lt;- levels(droplevels(cipher.frame$alphabet))
        cipher.frame$cipher.num &amp;lt;- sample(1:length(cipher.frame$alphabet), length(cipher.frame$alphabet))
        cipher.frame$cipherbet &amp;lt;- cipher.frame[order(cipher.frame$cipher.num), ]$alphabet
        cipher.list[[i]] &amp;lt;- cipher.frame
    }

    encrypted.password &amp;lt;- c()
    for (j in 1:the.length) {
        encrypted.letter &amp;lt;- unlist(strsplit(my.password, &amp;quot;&amp;quot;))[j]
        encrypted.password[j] &amp;lt;- cipher.list[[j]]$cipherbet[match(encrypted.letter, cipher.list[[j]]$alphabet)]
    }

    count &amp;lt;- any(encrypted.password %in% specials) +
        any(encrypted.password %in% letters) +
        any(encrypted.password %in% LETTERS)

    if(count!=3) {
        warning(&amp;quot;Encryption does not include lower, upper, and special characters&amp;quot;)
        }

    out &amp;lt;- rbind(cbind(&amp;quot;Original&amp;quot;,&amp;quot;Encrypted&amp;quot;),cbind(my.password,
             paste(encrypted.password,collapse=&amp;quot;&amp;quot;)))

    return(out)
}

# basically copy and paste
DecipherWord &amp;lt;- function(my.encrypted.word, my.key) {

    set.seed(my.key)
    the.length &amp;lt;- length(unlist(strsplit(my.encrypted.word, &amp;quot;&amp;quot;)))
    the.vec &amp;lt;- unlist(strsplit(my.encrypted.word, &amp;quot;&amp;quot;))
    specials &amp;lt;- c(unlist(strsplit(&amp;quot;!§$%&amp;amp;/()=?@*#&amp;lt;&amp;gt;_-.;+{}[]&amp;quot;, &amp;quot;&amp;quot;)))
    all.characters &amp;lt;- c(letters, LETTERS, 0:9, specials)

    if (!all(the.vec %in% all.characters)) {
    stop(&amp;quot;unkown character(s) in the encrypted word&amp;quot;)
    }

    cipher.list &amp;lt;- NULL
    for (i in 1:the.length) {
        cipher.frame &amp;lt;- data.frame(alphabet = all.characters)
        cipher.frame$alphabet &amp;lt;- levels(droplevels(cipher.frame$alphabet))
        cipher.frame$cipher.num &amp;lt;- sample(1:length(cipher.frame$alphabet), length(cipher.frame$alphabet))
        cipher.frame$cipherbet &amp;lt;- cipher.frame[order(cipher.frame$cipher.num), ]$alphabet
        cipher.list[[i]] &amp;lt;- cipher.frame
    }

    decrypted.password &amp;lt;- c()
    for (j in 1:the.length) {
        decrypted.letter &amp;lt;- unlist(strsplit(my.encrypted.word, &amp;quot;&amp;quot;))[j]
        decrypted.password[j] &amp;lt;- cipher.list[[j]]$alphabet[match(decrypted.letter, cipher.list[[j]]$cipherbet)]
    }

    out &amp;lt;- rbind(cbind(&amp;quot;Encrypted&amp;quot;,&amp;quot;Decrypted&amp;quot;),cbind(my.encrypted.word,
             paste(decrypted.password,collapse=&amp;quot;&amp;quot;)))

    return(out)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;how-does-it-work&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;How does it work?&lt;/h1&gt;
&lt;p&gt;Imagine you are accepted at a conference and the upload of the paper requires setting up an account with your Email address and a password. You would love to choose an easy word such as “EasyPassword” but you are aware that this is neither secure nor accepted by most webpages. With the functions that I have provided above, it is possible to transform “EasyPassword” to “Q/VX@ezlQptv”. The CipherWord() function requires the word that you would like to encrypt and a key number (for set.seed). The key number becomes the user’s personal encryption key. One option to use CipherWord() is remembering one personal key and choosing easy passwords such as “PasswordPAA2021” for PAA in 2021 or “PasswordEPC2022” for EPC in 2022. Alternatively, the user can keep the password constant but change the encryption key. The encryption key might be based on a fancy function, refer to the date of a given conference, or the session number of the presentation. In the following example, I encrypt “EasyPassword” with the key “123” to the much safer password “Q/VX@ezlQptv”. The DecipherWord() function reverses the encryption as long as the user knows the right key (“123” in the example). Accordingly, the function can also be used to inform close colleagues (with access to the encryption key) about the secret lunch date location ^_^&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;CipherWord(&amp;quot;EasyPassword&amp;quot;, 123)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      my.password                  
## [1,] &amp;quot;Original&amp;quot;     &amp;quot;Encrypted&amp;quot;   
## [2,] &amp;quot;EasyPassword&amp;quot; &amp;quot;Q/VX@ezlQptv&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;DecipherWord(&amp;quot;Q/VX@ezlQptv&amp;quot;, 123)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      my.encrypted.word               
## [1,] &amp;quot;Encrypted&amp;quot;       &amp;quot;Decrypted&amp;quot;   
## [2,] &amp;quot;Q/VX@ezlQptv&amp;quot;    &amp;quot;EasyPassword&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;the-challenge-of-password-requirements&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;The challenge of password requirements&lt;/h1&gt;
&lt;p&gt;I encounter mostly webpages with the requirement of selecting a password that includes lower- and upper case letters as well as at least one special character. At the moment, the function CipherWord() gives you a warning in case this requirements are not met. It is also possible to modify the function in a way that it automatically forces this combination of letters whenever necessary. However, the empirical analysis shown below indicates that this issue is relatively rare. Especially, if the input word is not too short (choosing a relative long password is actually always a good idea). For this reason, I do not take any specific password requirements into account for the moment.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;specials &amp;lt;- c(unlist(strsplit(&amp;quot;!§$%&amp;amp;/()=?@*#&amp;lt;&amp;gt;_-.;+{}[]&amp;quot;, &amp;quot;&amp;quot;)))
yes &amp;lt;- 0
no &amp;lt;- 0

for (i in 1:100) {
    the.word &amp;lt;- CipherWord(&amp;quot;EasyPassword&amp;quot;, i)[2,2]
    the.word &amp;lt;- unlist(strsplit(the.word, &amp;quot;&amp;quot;))

    count &amp;lt;- any(the.word %in% specials) +
        any(the.word %in% letters) +
        any(the.word %in% LETTERS)

    if (count==3) {
        yes &amp;lt;- yes+1
    }else{
        no &amp;lt;- no+1
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in CipherWord(&amp;quot;EasyPassword&amp;quot;, i): Encryption does not include lower,
## upper, and special characters

## Warning in CipherWord(&amp;quot;EasyPassword&amp;quot;, i): Encryption does not include lower,
## upper, and special characters

## Warning in CipherWord(&amp;quot;EasyPassword&amp;quot;, i): Encryption does not include lower,
## upper, and special characters

## Warning in CipherWord(&amp;quot;EasyPassword&amp;quot;, i): Encryption does not include lower,
## upper, and special characters&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bars &amp;lt;- barplot(cbind(yes,no), col=&amp;quot;lightgray&amp;quot;,
                main=&amp;quot;Include lower-, upper-, and specical characters?&amp;quot;,
                cex.main=1.5
                )
text(bars, 40, paste(cbind(yes,no), &amp;quot;times&amp;quot;, &amp;quot; &amp;quot;), cex=1.5)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/crypto/index.en_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;
Now, the same procedure but with a longer input word (LongerPasswordsAreBetter).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;yes &amp;lt;- 0
no &amp;lt;- 0

for (i in 1:100) {
    the.word &amp;lt;- CipherWord(&amp;quot;LongerPasswordsAreBetter&amp;quot;, i)[2,2]
    the.word &amp;lt;- unlist(strsplit(the.word, &amp;quot;&amp;quot;))

    count &amp;lt;- any(the.word %in% specials) +
        any(the.word %in% letters) +
        any(the.word %in% LETTERS)

    if (count==3) {
        yes &amp;lt;- yes+1
    }else{
        no &amp;lt;- no+1
    }
}

bars &amp;lt;- barplot(cbind(yes,no), col=&amp;quot;lightgray&amp;quot;,
                main=&amp;quot;Include lower-, upper-, and specical characters?&amp;quot;,
                cex.main=1.5
                )
text(bars, 40, paste(cbind(yes,no), &amp;quot;times&amp;quot;, &amp;quot; &amp;quot;), cex=1.5)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/crypto/index.en_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;references&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Singh, Simon (2002). The Code Book: The Secret History of Codes and Code-Breaking. Harper Collins Publishers UK: (Reissue) Edition.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Reconstruction life table functions from life expectancy</title>
      <link>/post/getting-started/</link>
      <pubDate>Sun, 04 Jul 2021 00:00:00 +0000</pubDate>
      <guid>/post/getting-started/</guid>
      <description>&lt;h2 id=&#34;deriving-education-specific-life-tables-with-an-iterative-process&#34;&gt;Deriving education-specific life tables with an iterative process&lt;/h2&gt;
&lt;p&gt;The life table survivors at age $x$ ($l_x$) can be obtained from life expectancy estimates at age $x$ ($e_x$) after assuming that in each age interval $x$ to $x+1$, people dying within this period live on average $1/2$ person-years ($a_x=0.5$):
\begin{equation}
l_{x+1}=\frac{l_x \cdot (2 \cdot e_x -1)}{1+2 \cdot e_{x+1}}.
\end{equation}
Please note, $l_0$ denotes the life table radix (usually defined as 100 000) and does not require estimation. Thus, the life table reconstruction starts with deriving $l_1$:
\begin{equation}
l_{1}=\frac{l_0 \cdot (2 \cdot e_0 -1)}{1+2 \cdot e_{1}}.
\end{equation}
In this way, the life table survivors at age 1 can be estimated from three known life table functions, i.e.,  $l_0$, $e_0$, and $e_1$. In the next step, $l_2$ is estimated from $l_1$, $e_1$, and $e_2$ and so forth. Once all $l_x$ are estimated on the basis of this algorithm, the remaining life table functions can be easily derived, such as $L_x$ ($L_x=(l_x+l_{x+1})/2)$. Theoretically, equation 1 enables us to reconstruct life table functions based on $e_x$ values (under the $a_x$ = 0.5 assumption). In practice, however, the reconstruction might require additional steps. For example, the $e_x$ values provided by Eurostat have only one decimal place. This limits the accuracy of the $l_x$ derivation and might result in constant $l_x$ values for several ages. To overcome this issue, we fitted a non-parametric curve to the data and predicted $e_x$ values with more decimal places. More specifically, we used the loess() function in R in order to obtain $e_x$ values with more decimal places that are as close as possible to the original $e_x$ values. In some cases, e.g., for the highly educated subpopulation in very low-mortality countries, the proposed derivation procedure still produces constant $l_x$ values at young ages. We solved this issue by focusing on $e_{30}$ and HLY at age 30.&lt;/p&gt;
&lt;p&gt;The following code provides an example for calculating education-specific life tables when only the education-specific $e_x$ values are known. In other words, the aim of the code is to calculate the life table backwards, namely from $e_x$ to $p_x$. This is necessary because Eurostat does not provide education-specific life tables, but education-specific $e_x$ values are available. Please note, the results in this example will differ from the results in my paper (Sauerberg 2021) due to updates in the Eurostat database.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(dplyr)
library(eurostat)
#please load these packages and download the data like this:
data &amp;lt;- get_eurostat(&amp;quot;demo_mlexpecedu&amp;quot;, time_format = &amp;quot;num&amp;quot;)

#rename and redefine the file 
data$isced11 &amp;lt;- as.character(data$isced11)
data$isced11 &amp;lt;- ifelse(data$isced11==&amp;quot;ED0-2&amp;quot;, &amp;quot;lower&amp;quot;, data$isced11)
data$isced11 &amp;lt;- ifelse(data$isced11==&amp;quot;ED3_4&amp;quot;, &amp;quot;middle&amp;quot;, data$isced11)
data$isced11 &amp;lt;- ifelse(data$isced11==&amp;quot;ED5-8&amp;quot;, &amp;quot;higher&amp;quot;, data$isced11)
data$isced11 &amp;lt;- ifelse(data$isced11==&amp;quot;TOTAL&amp;quot;, &amp;quot;total&amp;quot;, data$isced11)

data$age &amp;lt;- as.character(data$age)
data$age &amp;lt;- ifelse(data$age==&amp;quot;Y_LT1&amp;quot;, &amp;quot;Y0&amp;quot;, data$age)
data$age &amp;lt;- ifelse(data$age==&amp;quot;Y_GE85&amp;quot;, &amp;quot;Y85&amp;quot;, data$age)
data$age &amp;lt;- substring(data$age, 2)

data &amp;lt;- data[,-1]
colnames(data) &amp;lt;- c(&amp;quot;sex&amp;quot;,&amp;quot;age&amp;quot;,&amp;quot;edu&amp;quot;,&amp;quot;country&amp;quot;,&amp;quot;year&amp;quot;,&amp;quot;ex&amp;quot;)
data$age &amp;lt;- as.numeric(data$age)
#Filter for the year 2016, as we have done
data &amp;lt;- filter(data, year==2016)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following function has the arguments &amp;ldquo;country.select&amp;rdquo;, &amp;ldquo;edu.select&amp;rdquo; and &amp;ldquo;sex.select&amp;rdquo;. Thus, the funcation allows to derive life tables for each educational level (high, middle, low, and total), for each country with available data (16 European countries), separated for men and women.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;my.function &amp;lt;- function(country.select, edu.select, sex.select) {

    select.country &amp;lt;- arrange(filter(data, country==country.select ,edu==edu.select &amp;amp;
                                               sex==sex.select),age)

#smooth to get more decimals by applying the loess function,
#then predict ex with more decimals
    grab.LE &amp;lt;- select.country$ex
    smooth.it &amp;lt;- loess(grab.LE~select.country$age, span=0.2)
    predict.it &amp;lt;- predict(smooth.it, seq(0,85,1))
    select.country$ex.decimals &amp;lt;- predict.it

    LT.derive &amp;lt;- data.frame(Age=0:85)
    LT.derive$lx &amp;lt;- NA

    LT.derive$ex &amp;lt;- select.country$ex.decimals
    LT.derive$lx[1] &amp;lt;- 100000
    LT.derive$Tx[1] &amp;lt;- 100000*select.country$ex.decimals[1]
    
#this loop refers to equation 1 in the paper
    for (j in 2:86) {

        upper &amp;lt;- LT.derive$lx[j-1]*(2*LT.derive$ex[j-1]-1)
        bottom &amp;lt;- 1+2*LT.derive$ex[j]
        LT.derive$lx[j] &amp;lt;- upper/bottom
    }
#Checks if lx is monotonic decreasing, i.e., no resurrection in the life table
    lx.diff &amp;lt;- diff(LT.derive$lx)
    lx.diff &amp;lt;- round(lx.diff, 5)

    if (all(diff(lx.diff) &amp;lt; 0)) {

        px &amp;lt;- c(LT.frame$lx[-1]/LT.frame$lx[-86],0)

    }else{
#sometimes, it is not, so I force it =)
#please note, this occurs usually at very young ages and won&#39;t affect
#LE at age 30 or older
        lx.diff[lx.diff&amp;gt;=0] &amp;lt;- -runif(length(lx.diff[lx.diff&amp;gt;=0]), 1, 5)
        lx.monotonic &amp;lt;- cumsum(c(100000, lx.diff))
        px &amp;lt;- c(lx.monotonic[-1]/lx.monotonic[-86],0)

        }
#from here, the life table is constructed very standardly
    lx &amp;lt;- round(c(100000, (cumprod(px)*100000)[1:(length(px)-1)]))
    dx &amp;lt;- round(c(-diff(lx), lx[length(lx)]))
    LT.derive$lx &amp;lt;- lx
    LT.derive$dx &amp;lt;- dx
    LT.derive$px &amp;lt;- px
    Lx1 &amp;lt;- lx[-1]+0.5[-length(px)]*dx[-length(dx)]
    Lx.open &amp;lt;- LT.derive$Tx[1]-sum(Lx1)
    LT.derive$Lx &amp;lt;- round(c(Lx1, Lx.open))
    LT.derive$Tx &amp;lt;- rev(cumsum(rev(LT.derive$Lx)))
    LT.derive$ex.derived &amp;lt;- LT.derive$Tx/LT.derive$lx
    LT.derive$ex.original &amp;lt;- select.country$ex
    LT.derive$diff &amp;lt;- LT.derive$ex.original-LT.derive$ex.derived
    LT.derive$Country &amp;lt;- country.select
    LT.derive$Edu &amp;lt;- edu.select
    LT.derive$Sex &amp;lt;- sex.select

    return(LT.derive[,c(&amp;quot;Country&amp;quot;,&amp;quot;Edu&amp;quot;,&amp;quot;Sex&amp;quot;,&amp;quot;Age&amp;quot;,&amp;quot;px&amp;quot;,&amp;quot;lx&amp;quot;,&amp;quot;dx&amp;quot;,&amp;quot;Lx&amp;quot;,
                        &amp;quot;Tx&amp;quot;,&amp;quot;ex.derived&amp;quot;,&amp;quot;ex.original&amp;quot;,&amp;quot;diff&amp;quot;)])
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following code applies the function to all 16 European countries by educational attainment, stratified by sex.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#these are the country codes
edu.countries &amp;lt;- c(&amp;quot;BG&amp;quot;,&amp;quot;DK&amp;quot;,&amp;quot;EE&amp;quot;,&amp;quot;EL&amp;quot;,&amp;quot;HR&amp;quot;,&amp;quot;IT&amp;quot;,&amp;quot;HU&amp;quot;, #CZ is currently not available
                   &amp;quot;PL&amp;quot;,&amp;quot;PT&amp;quot;,&amp;quot;RO&amp;quot;,&amp;quot;SI&amp;quot;,&amp;quot;SK&amp;quot;,&amp;quot;FI&amp;quot;,&amp;quot;SE&amp;quot;,&amp;quot;NO&amp;quot;)


###Females###
out.females &amp;lt;- c()

for (country.select in edu.countries) {

    for (edu.select in c(&amp;quot;higher&amp;quot;,&amp;quot;middle&amp;quot;,&amp;quot;lower&amp;quot;)) {

        out.females &amp;lt;- rbind(out.females,my.function(country.select, edu.select, &amp;quot;F&amp;quot;))
}
}


###Males###
out.males &amp;lt;- c()

for (country.select in edu.countries) {

    for (edu.select in c(&amp;quot;higher&amp;quot;,&amp;quot;middle&amp;quot;,&amp;quot;lower&amp;quot;)) {

        out.males &amp;lt;- rbind(out.males,my.function(country.select, edu.select, &amp;quot;M&amp;quot;))
}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, I plot the difference between the original $e_x$ and the derived $e_x$.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;par(mfrow=c(3,3))
for (edu in c(&amp;quot;higher&amp;quot;,&amp;quot;middle&amp;quot;,&amp;quot;lower&amp;quot;)) {
    plot(1,1, type=&amp;quot;n&amp;quot;, xlim=c(1,16), ylim=c(-0.2,0.2),
         main=paste(&amp;quot;Females&amp;quot;,edu,sep=&amp;quot; &amp;quot;), xlab=&amp;quot;Countries&amp;quot;,
         ylab=&amp;quot;LE 30 original - LE30 derived&amp;quot;)
    points(1:15,out.females$diff[out.females$Edu==edu &amp;amp; out.females$Age==30])
    text(1:15,out.females$diff[out.females$Edu==edu &amp;amp; out.females$Age==30], 1:16,
         label=out.females$Country[out.females$Edu==edu &amp;amp; out.females$Age==30])
}

for (edu in c(&amp;quot;higher&amp;quot;,&amp;quot;middle&amp;quot;,&amp;quot;lower&amp;quot;)) {
    plot(1,1, type=&amp;quot;n&amp;quot;, xlim=c(1,16), ylim=c(-0.2,0.2),
         main=paste(&amp;quot;Males&amp;quot;,edu,sep=&amp;quot; &amp;quot;), xlab=&amp;quot;Countries&amp;quot;,
         ylab=&amp;quot;LE 30 original - LE30 derived&amp;quot;)
    points(1:15,out.males$diff[out.males$Edu==edu &amp;amp; out.males$Age==30])
    text(1:15,out.males$diff[out.males$Edu==edu &amp;amp; out.males$Age==30], 1:16,
         label=out.males$Country[out.males$Edu==edu &amp;amp; out.males$Age==30])
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;complete-life-tables-by-age-and-education-stratified-by-women-and-men&#34;&gt;Complete life tables by age and education (stratified by women and men)&lt;/h2&gt;
&lt;p&gt;This prints all the age- and education-specific life tables (the output it omitted).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(knitr)

table.fun &amp;lt;- function(country.select) {
    
    print(
        kable(filter(out.females, Country==country.select &amp;amp; Edu==&amp;quot;higher&amp;quot;),
              digits=4, caption=paste(&amp;quot;Life table for high-educated women in&amp;quot;,
                                      country.select,&amp;quot;, 2016&amp;quot;,sep=&amp;quot; &amp;quot;)) 
        )
    print(
        kable(filter(out.females, Country==country.select &amp;amp; Edu==&amp;quot;middle&amp;quot;),
              digits=4, caption=paste(&amp;quot;Life table for middle-educated women in&amp;quot;,
                                      country.select,&amp;quot;, 2016&amp;quot;,sep=&amp;quot; &amp;quot;)) 
          )
    print(
        kable(filter(out.females, Country==country.select &amp;amp; Edu==&amp;quot;lower&amp;quot;),
              digits=4, caption=paste(&amp;quot;Life table for low-educated women in&amp;quot;,
                                      country.select,&amp;quot;, 2016&amp;quot;,sep=&amp;quot; &amp;quot;))
        )

    print(
        kable(filter(out.males, Country==country.select &amp;amp; Edu==&amp;quot;higher&amp;quot;),
              digits=4, caption=paste(&amp;quot;Life table for high-educated men in&amp;quot;,
                                      country.select,&amp;quot;, 2016&amp;quot;,sep=&amp;quot; &amp;quot;)) 
            )
    
    print(
        kable(filter(out.males, Country==country.select &amp;amp; Edu==&amp;quot;middle&amp;quot;),
              digits=4, caption=paste(&amp;quot;Life table for middle-educated men in&amp;quot;,
                                      country.select,&amp;quot;, 2016&amp;quot;,sep=&amp;quot; &amp;quot;)) 
            )
    print(
        kable(filter(out.males, Country==country.select &amp;amp; Edu==&amp;quot;lower&amp;quot;),
              digits=4, caption=paste(&amp;quot;Life table for low-educated men in&amp;quot;,
                                      country.select,&amp;quot;, 2016&amp;quot;,sep=&amp;quot; &amp;quot;)) 
            )    
}

for (country in edu.countries) {
    table.fun(country)  
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Sauerberg, M. (2021). The imapact of population&amp;rsquo;s educational attainment on Healthy Life Years in Europe: An empirical illustration of 16 European countries. SSM - Population Health, 15(100857).&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Shiny App for testing prevalence smoothing</title>
      <link>/project/external-project/</link>
      <pubDate>Sat, 03 Jul 2021 00:00:00 +0000</pubDate>
      <guid>/project/external-project/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The impact of population&#39;s educational composition on Healthy Life Years: An empirical illustration of 16 European countries</title>
      <link>/publication/hlyedu/</link>
      <pubDate>Sat, 26 Jun 2021 00:00:00 +0000</pubDate>
      <guid>/publication/hlyedu/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Das Mortalitätsgeschehen während der COVID-19-Pandemie in Deutschland und anderen europäischen Ländern</title>
      <link>/publication/popeurope/</link>
      <pubDate>Thu, 27 May 2021 00:00:00 +0000</pubDate>
      <guid>/publication/popeurope/</guid>
      <description></description>
    </item>
    
    <item>
      <title>PAA 2021 in session: Socioeconomic Status and Mortality in Europe</title>
      <link>/talk/paa-2021-in-session-socioeconomic-status-and-mortality-in-europe/</link>
      <pubDate>Fri, 07 May 2021 13:00:00 +0200</pubDate>
      <guid>/talk/paa-2021-in-session-socioeconomic-status-and-mortality-in-europe/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The cross-sectional average length of healthy life (HCAL): a measure that summarizes the history of cohort health and mortality</title>
      <link>/publication/hcal/</link>
      <pubDate>Mon, 31 Aug 2020 00:00:00 +0000</pubDate>
      <guid>/publication/hcal/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Life Expectancy: Frequently Used, but Hardly Understood</title>
      <link>/publication/le/</link>
      <pubDate>Wed, 07 Aug 2019 00:00:00 +0000</pubDate>
      <guid>/publication/le/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>/admin/config.yml</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/admin/config.yml</guid>
      <description></description>
    </item>
    
    <item>
      <title>Levels and trends of health expectancy</title>
      <link>/project/internal-project/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/project/internal-project/</guid>
      <description>&lt;p&gt;Good health is central to human happiness and wellbeing. It also contributes substantially to economic progress, as healthy populations live longer and are more productive. Accordingly, the EU defined the improvement of health as a fundamental element of its &amp;ldquo;Europe 2020&amp;rdquo; strategy. The corresponding public health policies are assessed on the basis of a structural indicator for &amp;ldquo;Health Expectancy&amp;rdquo; (HE). Unfortunately, HE estimates are extremely sensitive to certain methodological issues of which many are widely ignored. First, the common measurement of population health by the responses to specific survey questions is ambiguous. As a consequence, statistics on levels and trends of HE vary significantly depending on the underlying survey data and health indicators. Almost completely unrecognized is a second problem: HE estimates are also highly sensitive to particular technical features, e.g. the age range and partitioning selected for analysis and the technique chosen to add the health dimension to the life table. The efforts that have been hitherto undertaken to improve the estimation of HE focus primarily on the measurement of health with surveys, whereas the effects of the chosen HE indicator, data and method remain largely unexplored. The central aim of LETHE is to fill these gaps through a systematic exploration of the HE indicator&amp;rsquo;s sensitivity to these issues. To emphasize the empirical significance of the research, the effects will be investigated in the context of some major actual research questions, in particular the &amp;ldquo;compression versus expansion of morbidity&amp;rdquo; debate and the differences in HE between European populations and subpopulations. Finally, the project aims to identify the particular health measure that is most strongly associated with people&amp;rsquo;s actual happiness. These innovative approaches feature the potential to provide not only new insights into the levels and trends of HE, but also about its main drivers and causation mechanisms.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Posts</title>
      <link>/slides/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/slides/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
